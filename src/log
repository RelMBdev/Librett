CMakeLists.txt:if(ENABLE_CUDA)
CMakeLists.txt:  set_source_files_properties(${DEVICE_SOURCE_FILES} PROPERTIES LANGUAGE CUDA COMPILE_FLAGS "-x cu")
CMakeLists.txt:endif(ENABLE_CUDA)
GpuMem.cpp:  #else // CUDA
GpuMem.cpp:    #else // CUDA
GpuMemcpy.cpp:#else // CUDA
GpuMemcpy.cpp:#else // CUDA
GpuMemcpy.cpp:#else // CUDA
GpuMemcpy.cpp:#else // CUDA
GpuMemcpy.h:#else // CUDA
GpuModel.cpp:#else // CUDA
GpuModel.cpp:#else // CUDA or SYCL
GpuModel.cpp:#else // CUDA or HIP
GpuModel.cpp:#else // CUDA
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:  #else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:    #else // CUDA
GpuModelKernel.cpp:    #else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:      #else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:      #else // CUDA or HIP
GpuModelKernel.cpp:	#else // CUDA
GpuModelKernel.cpp:      #else // CUDA or HIP
GpuModelKernel.cpp:	#else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA or HIP
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:#else // CUDA
GpuModelKernel.cpp:#if CUDA
GpuModelKernel.cpp:#else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:  #else // CUDA
GpuUtils.cpp:    #else // CUDA
GpuUtils.h:#else // CUDA
GpuUtils.h:#else // CUDA
kernel.cpp:#else // CUDA
kernel.cpp:#else // CUDA or HIP
kernel.cpp:#else // CUDA
kernel.cpp:#else // CUDA
kernel.cpp:      #else // CUDA
kernel.cpp:#else // CUDA
kernel.cpp:      #else // CUDA
kernel.cpp:      #else // CUDA
kernel.cpp:      #else // CUDA
kernel.cpp:#else // CUDA
kernel.cpp:#else // CUDA or HIP
kernel.cpp:#else // CUDA
kernel.cpp:      #else // CUDA
kernel.cpp:#if CUDA // CUDA
kernel.cpp:#endif // CUDA
kernel.cpp:#else // CUDA & SYCL
kernel.cpp:      #if CUDA
kernel.cpp:      #endif // CUDA
kernel.cpp:        #else // CUDA
kernel.cpp:	  #if CUDA
kernel.cpp:	  #endif // CUDA
kernel.cpp:#if CUDA
kernel.cpp:#if CUDA
kernel.cpp:      /* DPCT1019:103: local_mem_size in SYCL is not a complete equivalent of sharedMemPerBlock in CUDA. */
kernel.cpp:      /* DPCT1019:104: local_mem_size in SYCL is not a complete equivalent of sharedMemPerBlock in CUDA. */
kernel.cpp:#else // CUDA
kernel.cpp:        #else // CUDA or HIP
kernel.cpp:        #else // CUDA or HIP
kernel.cpp:      #else // CUDA or HIP
kernel.cpp:      #else // CUDA or HIP
kernel.cpp:#if CUDA
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA or SYCL
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA or HIP
librett_bench.cpp:#else // CUDA or HIP
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA
librett_bench.cpp:#else // CUDA
librett.cpp:#else // CUDA
librett.cpp:  #else // CUDA
librett.cpp:    #else // CUDA
librett.cpp:#else // CUDA
librett.cpp://void CUDART_CB librettDestroy_callback(gpuStream_t stream, gpuError_t status,
librett.cpp:#else // CUDA
librett.h:#else // CUDA
librett.h:// stream            = CUDA stream (0 if no stream is used)
librett.h:// stream            = CUDA stream (0 if no stream is used)
librett_test.cpp:#else // CUDA
librett_test.cpp:#else // CUDA
librett_test.cpp:#else // CUDA
librett_test.cpp:#else // CUDA
librett_test.cpp:#else // CUDA
plan.cpp:      /* DPCT1019:0: local_mem_size in SYCL is not a complete equivalent of sharedMemPerBlock in CUDA. */
plan.cpp:        /* DPCT1019:1: local_mem_size in SYCL is not a complete equivalent of sharedMemPerBlock in CUDA. */
plan.cpp:#else // CUDA
plan.h:#else // CUDA
TensorTester.cpp:#else // CUDA
TensorTester.cpp:#else // CUDA
TensorTester.cpp:#else // CUDA
TensorTester.cpp:#else // CUDA or HIP
TensorTester.cpp:#else // CUDA
Timer.cpp:  #else // CUDA
Timer.cpp:  #else  // CUDA
Timer.cpp:  #else  // CUDA
Timer.cpp:    #else // CUDA
Timer.cpp:  #else  // CUDA
Timer.h:  #else // CUDA
uniapi.h:#else // CUDA
uniapi.h:  #define CUDA 1
uniapi.h:#else // CUDA & HIP
uniapi.h:#else // CUDA
uniapi.h:#else // CUDA
